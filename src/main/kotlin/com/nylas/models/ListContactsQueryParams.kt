package com.nylas.models

import com.squareup.moshi.Json

/**
 * Class representation of the query parameters for listing calendars.
 */
data class ListContactsQueryParams(
  /**
   * The maximum number of objects to return.
   * This field defaults to 50. The maximum allowed value is 200.
   */
  @Json(name = "limit")
  val limit: Int? = null,
  /**
   * An identifier that specifies which page of data to return.
   * This value should be taken from the [ListResponse.nextCursor] response field.
   */
  @Json(name = "page_token")
  val pageToken: String? = null,
  /**
   * Returns the contacts matching the exact contact's email.
   */
  @Json(name = "email")
  val email: String? = null,
  /**
   * Returns the contacts matching the contact's exact phone number
   */
  @Json(name = "phone_number")
  val phoneNumber: String? = null,
  /**
   * Returns the contacts matching from the address book or auto-generated contacts from emails.
   * For example of contacts only from the address book: /contacts?source=address_bookor for only autogenerated contacts:/contacts?source=inbox`
   */
  @Json(name = "source")
  val source: SourceType? = null,
  /**
   * Returns the contacts belonging to the Contact Group matching this ID
   */
  @Json(name = "group")
  val group: String? = null,
  /**
   * When set to true, returns the contacts also within the specified Contact Group subgroups, if the group parameter is set.
   */
  @Json(name = "recurse")
  val recurse: Boolean? = null,
) : IQueryParams {
  class Builder {
    private var limit: Int? = null
    private var pageToken: String? = null
    private var email: String? = null
    private var phoneNumber: String? = null
    private var source: SourceType? = null
    private var group: String? = null
    private var recurse: Boolean? = null

    /**
     * Sets the maximum number of objects to return.
     * This field defaults to 50. The maximum allowed value is 200.
     * @param limit The maximum number of objects to return.
     * @return The builder.
     */
    fun limit(limit: Int?) = apply { this.limit = limit }

    /**
     * Sets the identifier that specifies which page of data to return.
     * This value should be taken from the next_cursor response field.
     * @param pageToken The identifier that specifies which page of data to return.
     * @return The builder.
     */
    fun pageToken(pageToken: String?) = apply { this.pageToken = pageToken }

    /**
     * Sets the contacts matching the exact contact's email.
     * @param email The contacts matching the exact contact's email.
     * @return The builder.
     */
    fun email(email: String?) = apply { this.email = email }

    /**
     * Sets the contacts matching the contact's exact phone number
     * @param phoneNumber The contacts matching the contact's exact phone number
     * @return The builder.
     */
    fun phoneNumber(phoneNumber: String?) = apply { this.phoneNumber = phoneNumber }

    /**
     * Sets the contacts matching from the address book or auto-generated contacts from emails.
     * For example of contacts only from the address book: /contacts?source=address_bookor for only autogenerated contacts:/contacts?source=inbox`
     * @param source The contacts matching from the address book or auto-generated contacts from emails.
     * @return The builder.
     */
    fun source(source: SourceType?) = apply { this.source = source }

    /**
     * Sets the contacts belonging to the Contact Group matching this ID
     * @param group The contacts belonging to the Contact Group matching this ID
     * @return The builder.
     */
    fun group(group: String?) = apply { this.group = group }

    /**
     * Sets the contacts also within the specified Contact Group subgroups, if the group parameter is set.
     * @param recurse The contacts also within the specified Contact Group subgroups, if the group parameter is set.
     * @return The builder.
     */
    fun recurse(recurse: Boolean?) = apply { this.recurse = recurse }

    /**
     * Builds a [ListContactsQueryParams] instance.
     * @return The [ListContactsQueryParams] instance.
     */
    fun build() = ListContactsQueryParams(
      limit = limit,
      pageToken = pageToken,
      email = email,
      phoneNumber = phoneNumber,
      source = source,
      group = group,
      recurse = recurse,
    )
  }
}
